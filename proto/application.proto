syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

package application;

service application {
  // Connect to the BPA, and setup a bidirectional stream
  rpc Register(stream AppToBpa) returns (stream BpaToApp);
}

message AppToBpa {
  int32 msg_id = 1;
  oneof Msg {
    google.rpc.Status status = 2;
    RegisterApplicationRequest register = 3;
    SendRequest send = 4;
    ReceiveBundleResponse receive = 5;
    StatusNotifyResponse status_notify = 6;
  }
}

message BpaToApp {
  int32 msg_id = 1;
  oneof msg {
    google.rpc.Status status = 2;
    RegisterApplicationResponse register = 3;
    SendResponse send = 4;
    ReceiveBundleRequest receive = 5;
    StatusNotifyRequest status_notify = 6;
  }
}

message RegisterApplicationRequest {
  oneof service_id {
    string dtn = 1; /* dtn scheme service name */
    uint32 ipn = 2; /* ipn service number to be registered under
                                    node number of BPA node-id */
  }
}

message RegisterApplicationResponse { string EndpointId = 1; }

message SendRequest {
  enum SendFlags {
    _unused = 0;
    DoNotFragment = 4;
    RequestAck = 0x20;
    ReportStatusTime = 0x40;
    NotifyReception = 0x4000;
    NotifyForwarding = 0x10000;
    NotifyDelivery = 0x20000;
    NotifyDeletion = 0x40000;
  }
  string destination = 1;
  bytes payload = 2;
  uint64 lifetime = 3;
  optional uint32 flags = 4;
}

message SendResponse { string bundle_id = 1; }

message ReceiveBundleRequest {
  string bundle_id = 1;
  bool ack_requested = 2;
  google.protobuf.Timestamp expiry = 3;
  bytes payload = 4;
}

message ReceiveBundleResponse {}

message StatusNotifyRequest {
  enum StatusKind {
    _unused = 0;
    received = 1;
    forwarded = 2;
    delivered = 3;
    deleted = 4;
  }
  string bundle_id = 1;
  StatusKind kind = 2;
  uint64 reason = 3;
  optional google.protobuf.Timestamp timestamp = 4;
}

message StatusNotifyResponse {}
