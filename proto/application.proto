syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

package application;

// The Application service provides an interface for applications to interact with the BPA.
// This is a bidirectional stream, allowing for asynchronous communication between the
// application and the BPA.
//
// The general flow is as follows:
// 1. The application calls the `Register` method, establishing a stream.
// 2. The first message from the application *must* be a `RegisterApplicationRequest`.
// 3. The BPA will respond with a `RegisterApplicationResponse` containing the new Endpoint ID.
// 4. The application and BPA can then exchange messages asynchronously.
service Application {
  // Connect to the BPA, and setup a bidirectional stream.
  rpc Register(stream AppToBpa) returns (stream BpaToApp);
}

// AppToBpa is a message sent from the application to the BPA.
message AppToBpa {
  // A unique identifier for the message, used to correlate requests and responses.
  int32 msg_id = 1;
  // The message content.
  oneof Msg {
    // A status message. This is used to indicate an error from the application.
    google.rpc.Status status = 2;
    // A request to register the application. This *must* be the first message.
    RegisterApplicationRequest register = 3;
    // A request to send a bundle.
    SendRequest send = 4;
    // A response to a receive bundle request.
    ReceiveBundleResponse receive = 5;
    // A response to a status notification.
    StatusNotifyResponse status_notify = 6;
  }
}

// BpaToApp is a message sent from the BPA to the application.
message BpaToApp {
  // A unique identifier for the message, used to correlate requests and responses.
  int32 msg_id = 1;
  // The message content.
  oneof msg {
    // A status message. This is used to indicate an error from the BPA.
    google.rpc.Status status = 2;
    // A response to a register application request.
    RegisterApplicationResponse register = 3;
    // A response to a send request.
    SendResponse send = 4;
    // A request to receive a bundle.
    ReceiveBundleRequest receive = 5;
    // A request to notify the application of a status change.
    StatusNotifyRequest status_notify = 6;
  }
}

// RegisterApplicationRequest is a request to register the application with the BPA.
// The application can either request a specific service ID, or allow the BPA to
// assign one automatically.
message RegisterApplicationRequest {
  // The service ID of the application.
  oneof service_id {
    // The dtn scheme service name. If empty, the BPA will assign a random service name.
    string dtn = 1;
    // The ipn service number to be registered under the node number of the BPA node-id.
    // If 0, the BPA will assign a random service number.
    uint32 ipn = 2;
  }
}

// RegisterApplicationResponse is a response to a register application request.
message RegisterApplicationResponse {
  // The endpoint ID of the registered application. This is the full EID of the service.
  string EndpointId = 1;
}

// SendRequest is a request to send a bundle.
message SendRequest {
  // Flags for sending a bundle. These are based on the Bundle Protocol Version 7
  // status report request flags.
  enum SendFlags {
    // Unused.
    SEND_FLAGS_UNUSED = 0;
    // Do not fragment the bundle.
    SEND_FLAGS_DO_NOT_FRAGMENT = 4;
    // Request an acknowledgement for the bundle.
    SEND_FLAGS_REQUEST_ACK = 0x20;
    // Report the status time for the bundle.
    SEND_FLAGS_REPORT_STATUS_TIME = 0x40;
    // Notify on reception of the bundle.
    SEND_FLAGS_NOTIFY_RECEPTION = 0x4000;
    // Notify on forwarding of the bundle.
    SEND_FLAGS_NOTIFY_FORWARDING = 0x10000;
    // Notify on delivery of the bundle.
    SEND_FLAGS_NOTIFY_DELIVERY = 0x20000;
    // Notify on deletion of the bundle.
    SEND_FLAGS_NOTIFY_DELETION = 0x40000;
  }
  // The destination of the bundle. This should be a valid EID.
  string destination = 1;
  // The payload of the bundle.
  bytes payload = 2;
  // The lifetime of the bundle in milliseconds.
  uint64 lifetime = 3;
  // The flags for the bundle. This is a bitmask of the SendFlags enum.
  optional uint32 flags = 4;
}

// SendResponse is a response to a send request.
message SendResponse {
  // The ID of the sent bundle.
  string bundle_id = 1;
}

// ReceiveBundleRequest is a request to receive a bundle. The BPA sends this to the
// application when a bundle is received for the application's service.
message ReceiveBundleRequest {
  // The ID of the bundle.
  string bundle_id = 1;
  // Whether an acknowledgement is requested.
  bool ack_requested = 2;
  // The expiry time of the bundle.
  google.protobuf.Timestamp expiry = 3;
  // The payload of the bundle.
  bytes payload = 4;
}

// ReceiveBundleResponse is a response to a receive bundle request. The application
// sends this to the BPA to acknowledge receipt of the bundle.
message ReceiveBundleResponse {}

// StatusNotifyRequest is a request to notify the application of a bundle status change.
// This is sent by the BPA to the application when a status report is received for a
// bundle that was sent by the application.
message StatusNotifyRequest {
  // The kind of bundle status change.
  enum StatusKind {
    // Unused.
    STATUS_KIND_UNUSED = 0;
    // The bundle was received.
    STATUS_KIND_RECEIVED = 1;
    // The bundle was forwarded.
    STATUS_KIND_FORWARDED = 2;
    // The bundle was delivered.
    STATUS_KIND_DELIVERED = 3;
    // The bundle was deleted.
    STATUS_KIND_DELETED = 4;
  }
  // The ID of the bundle.
  string bundle_id = 1;
  // The kind of bundle status change.
  StatusKind kind = 2;
  // The RFC9171 reason-code for the bundle status change.
  uint64 reason = 3;
  // The timestamp of the status change.
  optional google.protobuf.Timestamp timestamp = 4;
}

// StatusNotifyResponse is a response to a status notification. The application
// sends this to the BPA to acknowledge receipt of the status notification.
message StatusNotifyResponse {}