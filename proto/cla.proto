syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";

package cla;

service Cla {
  // Connect to the BPA, and setup a bidirectional stream
  rpc Register(stream ClaToBpa) returns (stream BpaToCla);
}

message ClaToBpa {
  uint32 msg_id = 1;
  oneof msg {
    google.rpc.Status status = 2;
    RegisterClaRequest register = 3;
    DispatchBundleRequest dispatch = 4;
    AddPeerRequest add_peer = 5;
    RemovePeerRequest remove_peer = 6;
    ForwardBundleResponse forward = 7;
  }
}

message BpaToCla {
  uint32 msg_id = 1;
  oneof msg {
    google.rpc.Status status = 2;
    RegisterClaResponse register = 3;
    DispatchBundleResponse dispatch = 4;
    AddPeerResponse add_peer = 5;
    RemovePeerResponse remove_peer = 6;
    ForwardBundleRequest forward = 7;
  }
}

enum ClaAddressType {
  CLA_ADDRESS_TYPE_UNKNOWN = 0;
  CLA_ADDRESS_TYPE_TCP_CL_V4 = 1;
}

message ClaAddress {
  ClaAddressType address_type = 1;
  bytes address = 2;
}

message RegisterClaRequest {
  string name = 1;
  optional ClaAddressType address_type = 2;
}

message RegisterClaResponse {}

message DispatchBundleRequest { bytes bundle = 1; }

message DispatchBundleResponse {}

message AddPeerRequest {
  string eid = 1;
  ClaAddress address = 2;
}

message AddPeerResponse {}

message RemovePeerRequest {
  string eid = 1;
  ClaAddress address = 2;
}

message RemovePeerResponse {}

message ForwardBundleRequest {
  bytes bundle = 1;
  ClaAddress address = 2;
  uint32 queue = 3;
}

message ForwardBundleResponse {
  oneof result {
    google.protobuf.Empty sent = 1;
    google.protobuf.Empty no_neighbour = 2;
  }
}
