syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";

package cla;

// The Cla service provides an interface for Convergence Layer Adapters (CLAs)
// to interact with the BPA. This is a bidirectional stream, allowing for
// asynchronous communication between the CLA and the BPA.
//
// The general flow is as follows:
// 1. The CLA calls the `Register` method, establishing a stream.
// 2. The first message from the CLA *must* be a `RegisterClaRequest`.
// 3. The BPA will respond with a `RegisterClaResponse`.
// 4. The CLA and BPA can then exchange messages asynchronously.
service Cla {
  // Connect to the BPA, and setup a bidirectional stream.
  rpc Register(stream ClaToBpa) returns (stream BpaToCla);
}

// A message sent from the CLA to the BPA.
message ClaToBpa {
  // A unique identifier for the message, used to correlate requests and
  // responses.
  uint32 msg_id = 1;
  // The message content.
  oneof msg {
    // A status message. This is used to indicate an error from the CLA.
    google.rpc.Status status = 2;
    // A request to register the CLA. This *must* be the first message.
    RegisterClaRequest register = 3;
    // A request to dispatch a bundle from the CLA to the BPA.
    DispatchBundleRequest dispatch = 4;
    // A request to add a peer. This is used to inform the BPA of a new peer.
    AddPeerRequest add_peer = 5;
    // A request to remove a peer. This is used to inform the BPA that a peer is
    // no longer available.
    RemovePeerRequest remove_peer = 6;
    // A response to a forward bundle request.
    ForwardBundleResponse forward = 7;
  }
}

// A message sent from the BPA to the CLA.
message BpaToCla {
  // A unique identifier for the message, used to correlate requests and
  // responses.
  uint32 msg_id = 1;
  // The message content.
  oneof msg {
    // A status message. This is used to indicate an error from the BPA.
    google.rpc.Status status = 2;
    // A response to a register CLA request.
    RegisterClaResponse register = 3;
    // A response to a dispatch bundle request.
    DispatchBundleResponse dispatch = 4;
    // A response to an add peer request.
    AddPeerResponse add_peer = 5;
    // A response to a remove peer request.
    RemovePeerResponse remove_peer = 6;
    // A request to forward a bundle from the BPA to the CLA.
    ForwardBundleRequest forward = 7;
  }
}

// An enumeration of known CLA address types.
// This is used to identify the protocol associated with a `ClaAddress`.
// See `bpa::cla::ClaAddressType` for the Rust implementation.
enum ClaAddressType {
  // The address type is private.
  CLA_ADDRESS_TYPE_PRIVATE = 0;
  // IPv4 or IPv6 address and TCP port.
  CLA_ADDRESS_TYPE_TCP = 1;
}

// Represents a network address for a specific Convergence Layer Adapter.
// See `bpa::cla::ClaAddress` for the Rust implementation.
message ClaAddress {
  // The type of the CLA address.
  ClaAddressType address_type = 1;
  // The raw address bytes. The format of this field is dependent on the
  // `address_type`.
  bytes address = 2;
}

// A request to register a CLA with the BPA.
message RegisterClaRequest {
  // The name of the CLA. This should be unique among all registered CLAs.
  string name = 1;
  // The address type of the CLA. This is used to identify the protocol
  // associated with the CLA. If not provided, the CLA will not be registered as
  // a handler for any address type.
  optional ClaAddressType address_type = 2;
}

// A response to a register CLA request.
message RegisterClaResponse {}

// A request to dispatch a bundle from the CLA to the BPA.
message DispatchBundleRequest {
  // The bundle to dispatch. This should be a complete BPv7 bundle.
  bytes bundle = 1;
}

// A response to a dispatch bundle request.
message DispatchBundleResponse {}

// A request to add a peer to the CLA.
message AddPeerRequest {
  // The EID of the peer.
  string eid = 1;
  // The address of the peer.
  ClaAddress address = 2;
}

// A response to an add peer request.
message AddPeerResponse {}

// A request to remove a peer from the CLA.
message RemovePeerRequest {
  // The EID of the peer.
  string eid = 1;
  // The address of the peer.
  ClaAddress address = 2;
}

// A response to a remove peer request.
message RemovePeerResponse {}

// A request to forward a bundle from the BPA to the CLA.
message ForwardBundleRequest {
  // The bundle to forward. This should be a complete BPv7 bundle.
  bytes bundle = 1;
  // The address to forward the bundle to.
  ClaAddress address = 2;
  // The egress queue to use for forwarding. This is determined by the egress
  // policy.
  optional uint32 queue = 3;
}

// A response to a forward bundle request.
message ForwardBundleResponse {
  // The result of the forward request.
  oneof result {
    // The bundle was sent successfully.
    google.protobuf.Empty sent = 1;
    // The bundle could not be sent because the neighbor is no longer available.
    google.protobuf.Empty no_neighbour = 2;
  }
}