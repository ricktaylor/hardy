syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";

package cla;

service cla {
  // Connect to the BPA, and setup a bidirectional stream
  rpc Register(stream ClaToBpa) returns (stream BpaToCla);
}

message ClaToBpa {
  int32 msg_id = 1;
  oneof Msg {
    google.rpc.Status status = 2;
    RegisterClaRequest register = 3;
    DispatchBundleRequest dispatch = 4;
    AddSubnetRequest add_subnet = 5;
    RemoveSubnetRequest remove_subnet = 6;
    ForwardBundleResponse forward = 7;
  }
}

message BpaToCla {
  int32 msg_id = 1;
  oneof msg {
    google.rpc.Status status = 2;
    RegisterClaResponse register = 3;
    DispatchBundleResponse dispatch = 4;
    AddSubnetResponse add_subnet = 5;
    RemoveSubnetResponse remove_subnet = 6;
    ForwardBundleRequest forward = 7;
  }
}

message RegisterClaRequest { string ident_prefix = 1; }

message RegisterClaResponse { string ident = 1; }

message DispatchBundleRequest { bytes bundle = 1; }

message DispatchBundleResponse {}

message AddSubnetRequest { string pattern = 1; }

message AddSubnetResponse {}

message RemoveSubnetRequest { string pattern = 1; }

message RemoveSubnetResponse {}

message ForwardBundleRequest {
  string destination = 1;
  bytes bundle = 2;
}

message ForwardBundleResponse {
  oneof result {
    google.protobuf.Empty sent = 1;
    google.protobuf.Empty no_neighbour = 2;
    uint64 too_big = 3;
  }
}
