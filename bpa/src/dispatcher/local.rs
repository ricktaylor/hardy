use super::*;

impl Dispatcher {
    #[instrument(skip(self))]
    pub async fn local_dispatch(
        &self,
        mut source: bpv7::Eid,
        mut destination: bpv7::Eid,
        data: &[u8],
        lifetime: time::Duration,
        flags: Option<service::SendFlags>,
    ) -> Result<bpv7::BundleId, Error> {
        // Check to see if we should use ipn 2-element encoding
        if self.ipn_2_element.contains(&destination) {
            if let bpv7::Eid::Ipn {
                allocator_id: sa,
                node_number: sn,
                service_number: ss,
            } = source
            {
                source = bpv7::Eid::LegacyIpn {
                    allocator_id: sa,
                    node_number: sn,
                    service_number: ss,
                };
            }

            if let bpv7::Eid::Ipn {
                allocator_id: da,
                node_number: dn,
                service_number: ds,
            } = destination
            {
                destination = bpv7::Eid::LegacyIpn {
                    allocator_id: da,
                    node_number: dn,
                    service_number: ds,
                };
            }
        }

        // Build the bundle
        let mut b = bpv7::Builder::new();

        // Set flags
        if let Some(flags) = flags {
            b.flags(bpv7::BundleFlags {
                do_not_fragment: flags.do_not_fragment,
                app_ack_requested: flags.request_ack,
                report_status_time: flags.report_status_time,
                receipt_report_requested: flags.notify_reception,
                forward_report_requested: flags.notify_forwarding,
                delivery_report_requested: flags.notify_delivery,
                delete_report_requested: flags.notify_deletion,
                ..Default::default()
            });

            if flags.notify_reception
                || flags.notify_forwarding
                || flags.notify_delivery
                || flags.notify_deletion
            {
                b.report_to(self.node_ids.get_admin_endpoint(&destination));
            }
        }
        b.source(source)
            .destination(destination)
            .lifetime(lifetime)
            .add_payload_block(data.into());

        let (bundle, data) = b.build();
        let bundle_id = bundle.id.clone();

        // Store to store
        let metadata = self
            .store
            .store(&bundle, &data, BundleStatus::default(), None)
            .await?
            .trace_expect("Duplicate bundle generated by builder!");

        // And process
        self.dispatch_bundle(bundle::Bundle { metadata, bundle })
            .await
            .map(|_| bundle_id)
    }

    #[instrument(skip(self, service))]
    pub async fn deliver_bundle(
        &self,
        service: Arc<service_registry::Service>,
        bundle: bundle::Bundle,
    ) -> Result<(), Error> {
        // Get the data!
        if let Some(data) = self.load_data(&bundle).await? {
            // Pass the bundle and data to the service
            service
                .service
                .on_receive(&bundle.bundle, data.as_ref().as_ref(), bundle.expiry())
                .await;
        }

        self.report_bundle_delivery(&bundle).await?;

        // And we are done with the bundle
        self.drop_bundle(bundle, None).await
    }
}
